import { ethers } from 'ethers';
import path from 'path';
import { WalletService } from './WalletService';
import { ProposalParams, Proposal, ProposalState, ProposalType, GovernanceError } from '../types';
import logger from '../utils/logger';

/**
 * Enhanced Contract Service using QuickNode Infrastructure
 * Features: Advanced security, reentrancy protection, circuit breaker pattern
 */

// Load QuickNode-verified ABI
const assetDaoAbi = require(path.join(process.cwd(), 'abis', '0xa87e662061237a121ca2e83e77da8251bc4b3529.abi.json'));

interface CircuitBreakerState {
  failures: number;
  lastFailureTime: number;
  state: 'CLOSED' | 'OPEN' | 'HALF_OPEN';
}

export class QuickNodeEnhancedService {
  private httpProvider: ethers.JsonRpcProvider;
  private wsProvider: ethers.WebSocketProvider | null = null;
  private assetDaoContract: ethers.Contract;
  private walletService: WalletService;
  private contractAddress: string;
  private circuitBreaker: CircuitBreakerState;
  private activeTransactions: Set<string> = new Set();

  // QuickNode endpoints
  private readonly QUICKNODE_HTTP = 'https://divine-methodical-layer.ethereum-sepolia.quiknode.pro/';
  private readonly QUICKNODE_WS = 'wss://divine-methodical-layer.ethereum-sepolia.quiknode.pro/';
  private readonly CONTRACT_ADDRESS = '0xa87e662061237a121Ca2E83E77dA8251bc4b3529';

  constructor(walletService: WalletService) {
    this.walletService = walletService;
    this.contractAddress = this.CONTRACT_ADDRESS;
    
    // Initialize QuickNode providers
    this.httpProvider = new ethers.JsonRpcProvider(this.QUICKNODE_HTTP);
    
    // Initialize circuit breaker
    this.circuitBreaker = {
      failures: 0,
      lastFailureTime: 0,
      state: 'CLOSED'
    };

    this.initializeContract();
    this.setupWebSocketConnection();
  }

  /**
   * Initialize contract with HTTP provider
   */
  private initializeContract(): void {
    try {
      this.assetDaoContract = new ethers.Contract(
        this.contractAddress,
        assetDaoAbi,
        this.httpProvider
      );

      logger.info('QuickNode Enhanced service initialized', {
        component: 'quicknode-enhanced',
        contractAddress: this.contractAddress,
        provider: 'QuickNode Sepolia'
      });
    } catch (error) {
      throw new GovernanceError(
        `Failed to initialize QuickNode service: ${error instanceof Error ? error.message : String(error)}`,
        'QUICKNODE_INIT_ERROR'
      );
    }
  }

  /**
   * Setup WebSocket connection for real-time events
   */
  private async setupWebSocketConnection(): Promise<void> {
    try {
      this.wsProvider = new ethers.WebSocketProvider(this.QUICKNODE_WS);
      
      const wsContract = new ethers.Contract(
        this.contractAddress,
        assetDaoAbi,
        this.wsProvider
      );

      // Monitor critical governance events
      wsContract.on('ProposalCreated', this.handleProposalCreated.bind(this));
      wsContract.on('VoteCast', this.handleVoteCast.bind(this));
      wsContract.on('ProposalExecuted', this.handleProposalExecuted.bind(this));

      logger.info('QuickNode WebSocket monitoring activated');
    } catch (error) {
      logger.warn('WebSocket setup failed, continuing with HTTP only', { error });
    }
  }

  /**
   * Circuit breaker implementation for reliability
   */
  private checkCircuitBreaker(): void {
    const now = Date.now();
    const FAILURE_THRESHOLD = 5;
    const TIMEOUT_PERIOD = 60000; // 1 minute

    if (this.circuitBreaker.state === 'OPEN') {
      if (now - this.circuitBreaker.lastFailureTime > TIMEOUT_PERIOD) {
        this.circuitBreaker.state = 'HALF_OPEN';
        logger.info('Circuit breaker moving to HALF_OPEN state');
      } else {
        throw new GovernanceError('Circuit breaker is OPEN', 'CIRCUIT_BREAKER_OPEN');
      }
    }

    if (this.circuitBreaker.failures >= FAILURE_THRESHOLD) {
      this.circuitBreaker.state = 'OPEN';
      this.circuitBreaker.lastFailureTime = now;
      logger.error('Circuit breaker opened due to excessive failures');
      throw new GovernanceError('Circuit breaker opened', 'CIRCUIT_BREAKER_OPEN');
    }
  }

  /**
   * Enhanced proposal creation with comprehensive safety
   */
  async createProposal(nodeIndex: number, params: ProposalParams): Promise<string> {
    this.checkCircuitBreaker();
    
    try {
      const wallet = this.walletService.getWallet(nodeIndex);
      const contract = this.assetDaoContract.connect(wallet);
      
      // Reentrancy protection
      const transactionId = `create-${nodeIndex}-${Date.now()}`;
      if (this.activeTransactions.has(transactionId)) {
        throw new GovernanceError('Duplicate transaction detected', 'REENTRANCY_PROTECTION');
      }
      this.activeTransactions.add(transactionId);

      logger.info('Creating proposal with QuickNode', {
        nodeIndex,
        proposer: wallet.address,
        proposalType: params.proposalType,
        assetAddress: params.assetAddress,
        amount: params.amount,
        transactionId
      });

      // Gas estimation with safety
      const gasEstimate = await contract.createProposal.estimateGas(
        params.proposalType,
        params.assetAddress,
        ethers.parseEther(params.amount),
        params.description,
        params.additionalData || '0x'
      );

      const gasLimit = gasEstimate * 125n / 100n; // 25% buffer
      const feeData = await this.httpProvider.getFeeData();
      const gasPrice = feeData.maxFeePerGas || feeData.gasPrice || ethers.parseUnits('20', 'gwei');

      // Execute transaction
      const nonce = await wallet.getNonce();
      const tx = await contract.createProposal(
        params.proposalType,
        params.assetAddress,
        ethers.parseEther(params.amount),
        params.description,
        params.additionalData || '0x',
        { gasLimit, gasPrice, nonce }
      );

      const receipt = await tx.wait();
      const proposalId = this.parseProposalCreatedEvent(receipt);

      logger.info('Proposal created via QuickNode', {
        nodeIndex,
        proposalId,
        txHash: tx.hash,
        gasUsed: receipt.gasUsed.toString()
      });

      this.circuitBreaker.failures = 0; // Reset on success
      this.activeTransactions.delete(transactionId);
      return proposalId;

    } catch (error) {
      this.circuitBreaker.failures++;
      const errorMessage = `QuickNode proposal creation failed: ${error instanceof Error ? error.message : String(error)}`;
      logger.error(errorMessage, { nodeIndex, params });
      throw new GovernanceError(errorMessage, 'QUICKNODE_PROPOSAL_ERROR');
    }
  }

  /**
   * Enhanced voting with safety measures
   */
  async vote(nodeIndex: number, proposalId: string, support: boolean): Promise<string> {
    this.checkCircuitBreaker();
    
    try {
      const wallet = this.walletService.getWallet(nodeIndex);
      const contract = this.assetDaoContract.connect(wallet);
      
      // Reentrancy protection
      const transactionId = `vote-${nodeIndex}-${proposalId}-${Date.now()}`;
      if (this.activeTransactions.has(transactionId)) {
        throw new GovernanceError('Duplicate vote detected', 'REENTRANCY_PROTECTION');
      }
      this.activeTransactions.add(transactionId);

      logger.info('Casting vote via QuickNode', {
        nodeIndex,
        proposalId,
        support,
        voter: wallet.address
      });

      // Gas estimation and execution
      const gasEstimate = await contract.vote.estimateGas(proposalId, support);
      const gasLimit = gasEstimate * 125n / 100n;
      const feeData = await this.httpProvider.getFeeData();
      const gasPrice = feeData.maxFeePerGas || feeData.gasPrice || ethers.parseUnits('20', 'gwei');

      const nonce = await wallet.getNonce();
      const tx = await contract.vote(proposalId, support, {
        gasLimit,
        gasPrice,
        nonce
      });

      logger.info('Vote cast via QuickNode', {
        nodeIndex,
        proposalId,
        support,
        txHash: tx.hash
      });

      this.circuitBreaker.failures = 0; // Reset on success
      this.activeTransactions.delete(transactionId);
      return tx.hash;

    } catch (error) {
      this.circuitBreaker.failures++;
      const errorMessage = `QuickNode voting failed: ${error instanceof Error ? error.message : String(error)}`;
      logger.error(errorMessage, { nodeIndex, proposalId, support });
      throw new GovernanceError(errorMessage, 'QUICKNODE_VOTING_ERROR');
    }
  }

  /**
   * Get proposals with enhanced reliability
   */
  async getProposals(): Promise<Proposal[]> {
    this.checkCircuitBreaker();
    
    try {
      const proposalCount = await this.assetDaoContract.getProposalCount();
      const proposals: Proposal[] = [];
      
      logger.info('Fetching proposals via QuickNode', {
        totalProposals: proposalCount.toString()
      });

      // Batch process with error handling
      for (let i = 1; i <= proposalCount; i++) {
        try {
          const rawProposal = await this.assetDaoContract.getProposal(i);
          proposals.push(this.parseProposal(rawProposal, i));
        } catch (error) {
          logger.warn(`Failed to fetch proposal ${i}`, { error });
        }
      }

      this.circuitBreaker.failures = 0; // Reset on success
      logger.info('Proposals fetched via QuickNode', { count: proposals.length });
      return proposals;

    } catch (error) {
      this.circuitBreaker.failures++;
      const errorMessage = `QuickNode proposal retrieval failed: ${error instanceof Error ? error.message : String(error)}`;
      logger.error(errorMessage);
      throw new GovernanceError(errorMessage, 'QUICKNODE_RETRIEVAL_ERROR');
    }
  }

  /**
   * Check voting status
   */
  async hasVoted(proposalId: string, nodeIndex: number): Promise<boolean> {
    try {
      const wallet = this.walletService.getWallet(nodeIndex);
      return await this.assetDaoContract.hasVoted(proposalId, wallet.address);
    } catch (error) {
      logger.error('Failed to check vote status via QuickNode', { proposalId, nodeIndex, error });
      return false;
    }
  }

  /**
   * Event handlers for real-time monitoring
   */
  private handleProposalCreated(proposalId: bigint, assetId: bigint, proposer: string, proposalType: number): void {
    logger.info('QuickNode Event: New proposal created', {
      proposalId: proposalId.toString(),
      assetId: assetId.toString(),
      proposer,
      proposalType
    });
  }

  private handleVoteCast(proposalId: bigint, voter: string, support: boolean, weight: bigint): void {
    logger.info('QuickNode Event: Vote cast', {
      proposalId: proposalId.toString(),
      voter,
      support,
      weight: weight.toString()
    });
  }

  private handleProposalExecuted(proposalId: bigint): void {
    logger.info('QuickNode Event: Proposal executed', {
      proposalId: proposalId.toString()
    });
  }

  /**
   * Utility methods
   */
  private parseProposal(rawProposal: any, id: number): Proposal {
    return {
      id: id.toString(),
      proposer: rawProposal[5],
      proposalType: this.mapProposalType(rawProposal[1]),
      assetAddress: rawProposal[2],
      amount: rawProposal[3].toString(),
      description: rawProposal[4],
      votesFor: rawProposal[8].toString(),
      votesAgainst: rawProposal[9].toString(),
      startTime: Number(rawProposal[6]),
      endTime: Number(rawProposal[7]),
      executed: rawProposal[11],
      cancelled: false,
      state: this.mapProposalState(rawProposal[10])
    };
  }

  private parseProposalCreatedEvent(receipt: ethers.ContractTransactionReceipt): string {
    const proposalCreatedEvent = receipt.logs.find((log) => {
      try {
        const parsed = this.assetDaoContract.interface.parseLog({
          topics: log.topics as string[],
          data: log.data
        });
        return parsed?.name === 'ProposalCreated';
      } catch {
        return false;
      }
    });

    if (!proposalCreatedEvent) {
      throw new Error('ProposalCreated event not found');
    }

    const parsedEvent = this.assetDaoContract.interface.parseLog({
      topics: proposalCreatedEvent.topics as string[],
      data: proposalCreatedEvent.data
    });

    return parsedEvent?.args.proposalId.toString();
  }

  private mapProposalState(stateValue: any): ProposalState {
    const stateMap: { [key: number]: ProposalState } = {
      0: ProposalState.PENDING,
      1: ProposalState.ACTIVE,
      2: ProposalState.SUCCEEDED,
      3: ProposalState.DEFEATED,
      4: ProposalState.QUEUED,
      5: ProposalState.EXECUTED,
      6: ProposalState.CANCELLED
    };
    return stateMap[Number(stateValue)] || ProposalState.PENDING;
  }

  private mapProposalType(typeValue: any): ProposalType {
    const typeMap: { [key: number]: ProposalType } = {
      0: ProposalType.INVEST,
      1: ProposalType.DIVEST,
      2: ProposalType.REBALANCE
    };
    return typeMap[Number(typeValue)] || ProposalType.INVEST;
  }

  /**
   * Health check
   */
  async healthCheck(): Promise<boolean> {
    try {
      await this.httpProvider.getBlockNumber();
      return this.circuitBreaker.state !== 'OPEN';
    } catch {
      return false;
    }
  }

  /**
   * Cleanup
   */
  async shutdown(): Promise<void> {
    try {
      if (this.wsProvider) {
        await this.wsProvider.destroy();
      }
      logger.info('QuickNode Enhanced service shut down');
    } catch (error) {
      logger.error('Error during QuickNode shutdown', { error });
    }
  }
} 