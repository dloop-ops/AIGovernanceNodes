import { ethers } from 'ethers';
import path from 'path';
import { WalletService } from './WalletService';
import { ProposalParams, Proposal, ProposalState, ProposalType, GovernanceError } from '../types';
import logger from '../utils/logger';

/**
 * Enhanced Contract Service using QuickNode Infrastructure
 * 
 * Features:
 * - QuickNode HTTP and WebSocket connections
 * - Advanced error handling and retry mechanisms
 * - Gas optimization and transaction safety
 * - Real-time event monitoring
 * - Reentrancy protection
 * - Circuit breaker pattern for reliability
 */

// Load QuickNode-verified ABI
const assetDaoAbi = require(path.join(process.cwd(), 'abis', '0xa87e662061237a121ca2e83e77da8251bc4b3529.abi.json'));

interface CircuitBreakerState {
  failures: number;
  lastFailureTime: number;
  state: 'CLOSED' | 'OPEN' | 'HALF_OPEN';
}

interface TransactionSafetyConfig {
  maxGasLimit: bigint;
  gasBufferPercent: number;
  maxRetries: number;
  timeoutMs: number;
}

export class EnhancedQuickNodeService {
  private httpProvider: ethers.JsonRpcProvider;
  private wsProvider: ethers.WebSocketProvider | null = null;
  private assetDaoContract: ethers.Contract;
  private walletService: WalletService;
  private contractAddress: string;
  private circuitBreaker: CircuitBreakerState;
  private safetyConfig: TransactionSafetyConfig;
  private activeTransactions: Set<string> = new Set();

  // QuickNode endpoints
  private readonly QUICKNODE_HTTP = 'https://divine-methodical-layer.ethereum-sepolia.quiknode.pro/';
  private readonly QUICKNODE_WS = 'wss://divine-methodical-layer.ethereum-sepolia.quiknode.pro/';
  private readonly CONTRACT_ADDRESS = '0xa87e662061237a121Ca2E83E77dA8251bc4b3529';

  constructor(walletService: WalletService) {
    this.walletService = walletService;
    this.contractAddress = this.CONTRACT_ADDRESS;
    
    // Initialize QuickNode providers
    this.httpProvider = new ethers.JsonRpcProvider(this.QUICKNODE_HTTP);
    
    // Initialize circuit breaker
    this.circuitBreaker = {
      failures: 0,
      lastFailureTime: 0,
      state: 'CLOSED'
    };
    
    // Configure transaction safety
    this.safetyConfig = {
      maxGasLimit: 800000n, // Conservative gas limit
      gasBufferPercent: 25, // 25% buffer
      maxRetries: 3,
      timeoutMs: 30000 // 30 second timeout
    };

    this.initializeContract();
    this.setupWebSocketConnection();
  }

  /**
   * Initialize contract with HTTP provider
   */
  private initializeContract(): void {
    try {
      this.assetDaoContract = new ethers.Contract(
        this.contractAddress,
        assetDaoAbi,
        this.httpProvider
      );

      logger.info('Enhanced QuickNode service initialized', {
        component: 'enhanced-contract',
        contractAddress: this.contractAddress,
        provider: 'QuickNode Sepolia'
      });
    } catch (error) {
      throw new GovernanceError(
        `Failed to initialize enhanced contract service: ${error instanceof Error ? error.message : String(error)}`,
        'ENHANCED_CONTRACT_INIT_ERROR'
      );
    }
  }

  /**
   * Setup WebSocket connection for real-time events
   */
  private async setupWebSocketConnection(): Promise<void> {
    try {
      this.wsProvider = new ethers.WebSocketProvider(this.QUICKNODE_WS);
      
      const wsContract = new ethers.Contract(
        this.contractAddress,
        assetDaoAbi,
        this.wsProvider
      );

      // Monitor critical governance events
      wsContract.on('ProposalCreated', this.handleProposalCreated.bind(this));
      wsContract.on('VoteCast', this.handleVoteCast.bind(this));
      wsContract.on('ProposalExecuted', this.handleProposalExecuted.bind(this));

      logger.info('WebSocket event monitoring activated');
    } catch (error) {
      logger.warn('WebSocket setup failed, continuing with HTTP only', { error });
    }
  }

  /**
   * Circuit breaker implementation
   */
  private checkCircuitBreaker(): void {
    const now = Date.now();
    const FAILURE_THRESHOLD = 5;
    const TIMEOUT_PERIOD = 60000; // 1 minute

    if (this.circuitBreaker.state === 'OPEN') {
      if (now - this.circuitBreaker.lastFailureTime > TIMEOUT_PERIOD) {
        this.circuitBreaker.state = 'HALF_OPEN';
        logger.info('Circuit breaker moving to HALF_OPEN state');
      } else {
        throw new GovernanceError('Circuit breaker is OPEN', 'CIRCUIT_BREAKER_OPEN');
      }
    }

    if (this.circuitBreaker.failures >= FAILURE_THRESHOLD) {
      this.circuitBreaker.state = 'OPEN';
      this.circuitBreaker.lastFailureTime = now;
      logger.error('Circuit breaker opened due to excessive failures');
      throw new GovernanceError('Circuit breaker opened', 'CIRCUIT_BREAKER_OPEN');
    }
  }

  /**
   * Record circuit breaker success/failure
   */
  private recordCircuitBreakerResult(success: boolean): void {
    if (success) {
      this.circuitBreaker.failures = 0;
      this.circuitBreaker.state = 'CLOSED';
    } else {
      this.circuitBreaker.failures++;
      this.circuitBreaker.lastFailureTime = Date.now();
    }
  }

  /**
   * Enhanced gas estimation with safety checks
   */
  private async estimateGasWithSafety(
    contract: ethers.Contract,
    method: string,
    args: any[]
  ): Promise<{ gasLimit: bigint; gasPrice: bigint }> {
    try {
      // Estimate gas with timeout
      const estimatePromise = contract[method].estimateGas(...args);
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Gas estimation timeout')), 10000)
      );
      
      const gasEstimate = await Promise.race([estimatePromise, timeoutPromise]) as bigint;
      
      // Apply safety buffer
      let gasLimit = gasEstimate * BigInt(100 + this.safetyConfig.gasBufferPercent) / 100n;
      
      // Ensure within safety bounds
      if (gasLimit > this.safetyConfig.maxGasLimit) {
        gasLimit = this.safetyConfig.maxGasLimit;
        logger.warn('Gas limit capped for safety', {
          estimated: gasEstimate.toString(),
          capped: gasLimit.toString()
        });
      }

      // Get current gas price with EIP-1559 support
      const feeData = await this.httpProvider.getFeeData();
      const gasPrice = feeData.maxFeePerGas || feeData.gasPrice || ethers.parseUnits('20', 'gwei');

      return { gasLimit, gasPrice };
    } catch (error) {
      throw new GovernanceError(
        `Gas estimation failed: ${error instanceof Error ? error.message : String(error)}`,
        'GAS_ESTIMATION_ERROR'
      );
    }
  }

  /**
   * Enhanced proposal creation with comprehensive safety checks
   */
  async createProposal(nodeIndex: number, params: ProposalParams): Promise<string> {
    this.checkCircuitBreaker();
    
    try {
      const wallet = this.walletService.getWallet(nodeIndex);
      const contract = this.assetDaoContract.connect(wallet);
      
      // Reentrancy protection check
      const transactionId = `create-${nodeIndex}-${Date.now()}`;
      if (this.activeTransactions.has(transactionId)) {
        throw new GovernanceError('Duplicate transaction detected', 'REENTRANCY_PROTECTION');
      }
      this.activeTransactions.add(transactionId);

      logger.info('Creating proposal with enhanced safety', {
        nodeIndex,
        proposer: wallet.address,
        proposalType: params.proposalType,
        assetAddress: params.assetAddress,
        amount: params.amount,
        transactionId
      });

      // Validate parameters
      this.validateProposalParams(params);

      // Get gas estimates with safety
      const { gasLimit, gasPrice } = await this.estimateGasWithSafety(
        contract,
        'createProposal',
        [
          params.proposalType,
          params.assetAddress,
          ethers.parseEther(params.amount),
          params.description,
          params.additionalData || '0x'
        ]
      );

      // Execute transaction with timeout and nonce management
      const nonce = await wallet.getNonce();
      const txPromise = contract.createProposal(
        params.proposalType,
        params.assetAddress,
        ethers.parseEther(params.amount),
        params.description,
        params.additionalData || '0x',
        {
          gasLimit,
          gasPrice,
          nonce
        }
      );

      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Transaction timeout')), this.safetyConfig.timeoutMs)
      );

      const tx = await Promise.race([txPromise, timeoutPromise]) as ethers.ContractTransactionResponse;

      logger.info('Proposal transaction sent', {
        nodeIndex,
        txHash: tx.hash,
        gasLimit: gasLimit.toString(),
        gasPrice: ethers.formatUnits(gasPrice, 'gwei') + ' gwei',
        nonce: tx.nonce
      });

      // Wait for confirmation with timeout
      const receiptPromise = tx.wait();
      const receiptTimeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Receipt timeout')), 60000)
      );

      const receipt = await Promise.race([receiptPromise, receiptTimeoutPromise]) as ethers.ContractTransactionReceipt;

      if (!receipt) {
        throw new Error('Transaction receipt not found');
      }

      // Parse ProposalCreated event
      const proposalId = this.parseProposalCreatedEvent(receipt);

      logger.info('Proposal created successfully', {
        nodeIndex,
        proposalId,
        txHash: tx.hash,
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed.toString()
      });

      this.recordCircuitBreakerResult(true);
      this.activeTransactions.delete(transactionId);
      return proposalId;

    } catch (error) {
      this.recordCircuitBreakerResult(false);
      const errorMessage = `Enhanced proposal creation failed: ${error instanceof Error ? error.message : String(error)}`;
      logger.error(errorMessage, { nodeIndex, params });
      throw new GovernanceError(errorMessage, 'ENHANCED_PROPOSAL_CREATION_ERROR');
    }
  }

  /**
   * Enhanced voting with comprehensive safety and reentrancy protection
   */
  async vote(nodeIndex: number, proposalId: string, support: boolean): Promise<string> {
    this.checkCircuitBreaker();
    
    try {
      const wallet = this.walletService.getWallet(nodeIndex);
      const contract = this.assetDaoContract.connect(wallet);
      
      // Reentrancy protection
      const transactionId = `vote-${nodeIndex}-${proposalId}-${Date.now()}`;
      if (this.activeTransactions.has(transactionId)) {
        throw new GovernanceError('Duplicate vote detected', 'REENTRANCY_PROTECTION');
      }
      this.activeTransactions.add(transactionId);

      logger.info('Casting vote with enhanced safety', {
        nodeIndex,
        proposalId,
        support,
        voter: wallet.address,
        transactionId
      });

      // Validate voting eligibility
      await this.validateVotingEligibility(nodeIndex, proposalId);

      // Get gas estimates
      const { gasLimit, gasPrice } = await this.estimateGasWithSafety(
        contract,
        'vote',
        [proposalId, support]
      );

      // Execute vote with safety measures
      const nonce = await wallet.getNonce();
      const tx = await contract.vote(proposalId, support, {
        gasLimit,
        gasPrice,
        nonce
      });

      logger.info('Vote transaction sent', {
        nodeIndex,
        proposalId,
        support,
        txHash: tx.hash,
        gasUsed: gasLimit.toString(),
        nonce: tx.nonce
      });

      this.recordCircuitBreakerResult(true);
      this.activeTransactions.delete(transactionId);
      return tx.hash;

    } catch (error) {
      this.recordCircuitBreakerResult(false);
      const errorMessage = `Enhanced voting failed: ${error instanceof Error ? error.message : String(error)}`;
      logger.error(errorMessage, { nodeIndex, proposalId, support });
      throw new GovernanceError(errorMessage, 'ENHANCED_VOTING_ERROR');
    }
  }

  /**
   * Enhanced proposal retrieval with caching and error handling
   */
  async getProposals(): Promise<Proposal[]> {
    this.checkCircuitBreaker();
    
    try {
      const proposalCount = await this.assetDaoContract.getProposalCount();
      const proposals: Proposal[] = [];
      
      logger.info('Fetching proposals with enhanced safety', {
        totalProposals: proposalCount.toString()
      });

      // Batch process proposals with timeout protection
      const batchSize = 10;
      for (let i = 1; i <= proposalCount; i += batchSize) {
        const batch = [];
        const endIndex = Math.min(i + batchSize - 1, Number(proposalCount));
        
        for (let j = i; j <= endIndex; j++) {
          batch.push(this.getProposalWithTimeout(j));
        }
        
        const batchResults = await Promise.allSettled(batch);
        
        for (const result of batchResults) {
          if (result.status === 'fulfilled' && result.value) {
            proposals.push(result.value);
          } else if (result.status === 'rejected') {
            logger.warn('Failed to fetch proposal in batch', { error: result.reason });
          }
        }
        
        // Add delay between batches to prevent rate limiting
        if (endIndex < proposalCount) {
          await this.delay(500);
        }
      }

      this.recordCircuitBreakerResult(true);
      logger.info('Proposals fetched successfully', { count: proposals.length });
      return proposals;

    } catch (error) {
      this.recordCircuitBreakerResult(false);
      const errorMessage = `Enhanced proposal retrieval failed: ${error instanceof Error ? error.message : String(error)}`;
      logger.error(errorMessage);
      throw new GovernanceError(errorMessage, 'ENHANCED_PROPOSAL_RETRIEVAL_ERROR');
    }
  }

  /**
   * Check if a node has already voted on a proposal
   */
  async hasVoted(proposalId: string, nodeIndex: number): Promise<boolean> {
    try {
      const wallet = this.walletService.getWallet(nodeIndex);
      return await this.assetDaoContract.hasVoted(proposalId, wallet.address);
    } catch (error) {
      logger.error('Failed to check vote status', { proposalId, nodeIndex, error });
      return false;
    }
  }

  /**
   * Event handlers for real-time monitoring
   */
  private handleProposalCreated(proposalId: bigint, assetId: bigint, proposer: string, proposalType: number): void {
    logger.info('Real-time: New proposal created', {
      proposalId: proposalId.toString(),
      assetId: assetId.toString(),
      proposer,
      proposalType
    });
  }

  private handleVoteCast(proposalId: bigint, voter: string, support: boolean, weight: bigint): void {
    logger.info('Real-time: Vote cast', {
      proposalId: proposalId.toString(),
      voter,
      support,
      weight: weight.toString()
    });
  }

  private handleProposalExecuted(proposalId: bigint): void {
    logger.info('Real-time: Proposal executed', {
      proposalId: proposalId.toString()
    });
  }

  /**
   * Validation helpers
   */
  private validateProposalParams(params: ProposalParams): void {
    if (!params.assetAddress || !ethers.isAddress(params.assetAddress)) {
      throw new GovernanceError('Invalid asset address', 'INVALID_ASSET_ADDRESS');
    }
    
    if (!params.amount || parseFloat(params.amount) <= 0) {
      throw new GovernanceError('Invalid amount', 'INVALID_AMOUNT');
    }
    
    if (!params.description || params.description.trim().length === 0) {
      throw new GovernanceError('Description required', 'INVALID_DESCRIPTION');
    }
  }

  private async validateVotingEligibility(nodeIndex: number, proposalId: string): Promise<void> {
    // Check if already voted
    const hasVoted = await this.hasVoted(proposalId, nodeIndex);
    if (hasVoted) {
      throw new GovernanceError('Already voted on this proposal', 'ALREADY_VOTED');
    }

    // Check proposal exists and is active
    try {
      const proposal = await this.assetDaoContract.getProposal(proposalId);
      if (proposal[10] !== 1) { // Status should be ACTIVE (1)
        throw new GovernanceError('Proposal is not active', 'PROPOSAL_NOT_ACTIVE');
      }
    } catch (error) {
      throw new GovernanceError('Invalid proposal ID', 'INVALID_PROPOSAL');
    }
  }

  /**
   * Utility methods
   */
  private async getProposalWithTimeout(proposalId: number): Promise<Proposal | null> {
    try {
      const proposalPromise = this.assetDaoContract.getProposal(proposalId);
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Proposal fetch timeout')), 5000)
      );

      const rawProposal = await Promise.race([proposalPromise, timeoutPromise]);
      return this.parseProposal(rawProposal as any, proposalId);
    } catch (error) {
      logger.warn(`Failed to fetch proposal ${proposalId}`, { error });
      return null;
    }
  }

  private parseProposal(rawProposal: any, id: number): Proposal {
    return {
      id: id.toString(),
      proposer: rawProposal[5],
      proposalType: this.mapProposalType(rawProposal[1]),
      assetAddress: rawProposal[2],
      amount: rawProposal[3].toString(),
      description: rawProposal[4],
      votesFor: rawProposal[8].toString(),
      votesAgainst: rawProposal[9].toString(),
      startTime: Number(rawProposal[6]),
      endTime: Number(rawProposal[7]),
      executed: rawProposal[11],
      cancelled: false,
      state: this.mapProposalState(rawProposal[10])
    };
  }

  private parseProposalCreatedEvent(receipt: ethers.ContractTransactionReceipt): string {
    const proposalCreatedEvent = receipt.logs.find((log) => {
      try {
        const parsed = this.assetDaoContract.interface.parseLog({
          topics: log.topics as string[],
          data: log.data
        });
        return parsed?.name === 'ProposalCreated';
      } catch {
        return false;
      }
    });

    if (!proposalCreatedEvent) {
      throw new Error('ProposalCreated event not found');
    }

    const parsedEvent = this.assetDaoContract.interface.parseLog({
      topics: proposalCreatedEvent.topics as string[],
      data: proposalCreatedEvent.data
    });

    return parsedEvent?.args.proposalId.toString();
  }

  private mapProposalState(stateValue: any): ProposalState {
    const stateMap: { [key: number]: ProposalState } = {
      0: ProposalState.PENDING,
      1: ProposalState.ACTIVE,
      2: ProposalState.SUCCEEDED,
      3: ProposalState.DEFEATED,
      4: ProposalState.QUEUED,
      5: ProposalState.EXECUTED,
      6: ProposalState.CANCELLED
    };
    return stateMap[Number(stateValue)] || ProposalState.PENDING;
  }

  private mapProposalType(typeValue: any): ProposalType {
    const typeMap: { [key: number]: ProposalType } = {
      0: ProposalType.INVEST,
      1: ProposalType.DIVEST,
      2: ProposalType.REBALANCE
    };
    return typeMap[Number(typeValue)] || ProposalType.INVEST;
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Cleanup method
   */
  async shutdown(): Promise<void> {
    try {
      if (this.wsProvider) {
        await this.wsProvider.destroy();
      }
      logger.info('Enhanced QuickNode service shut down');
    } catch (error) {
      logger.error('Error during shutdown', { error });
    }
  }

  /**
   * Health check method
   */
  async healthCheck(): Promise<boolean> {
    try {
      await this.httpProvider.getBlockNumber();
      return this.circuitBreaker.state !== 'OPEN';
    } catch {
      return false;
    }
  }
} 